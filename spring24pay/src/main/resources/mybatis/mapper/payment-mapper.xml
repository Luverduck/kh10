<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "payment">

	<!-- payment 번호 생성 -->
	<select id = "paymentSequence" resultType = "int">
		select payment_seq.nextval from dual
	</select>
	
	<!-- payment 등록 -->
	<insert id = "paymentInsert" parameterType = "PaymentDto">
		insert into payment(payment_no, member_id, item_name, total_amount, approve_at, payment_status, tid) 
					values(#{paymentNo}, #{memberId}, #{itemName}, #{totalAmount}, #{approveAt}, '승인', #{tid})
	</insert>
	
	<!-- payment_detail 번호 생성 -->
	<select id = "paymentDetailSequence" resultType = "int">
		select payment_detail_seq.nextval from dual
	</select>
	
	<!-- payment_detail 등록 -->
	<insert id = "paymentDetailInsert" parameterType = "PaymentDetailDto">
		insert into payment_detail(payment_detail_no, payment_no, product_no, product_name, qty, product_price, payment_detail_status)
							values(#{paymentDetailNo}, #{paymentNo}, #{productNo}, #{productName}, #{qty}, #{productPrice}, '승인')
	</insert>
	
	<!-- 로그인한 회원의 결제 내역 전체 조회-->
	<select id="paymentHistory" resultType="PaymentDto" parameterType="String">
		select * from payment where member_id = #{memberId} order by payment_no desc
	</select>
	
	<!-- 결제 번호를 이용하여 결제 정보 조회 -->
	<select id = "findPayment" resultType = "PaymentDto" parameterType = "int">
		select * from payment where payment_no = #{paymentNo}
	</select>
	
	<!-- 결제 번호를 이용하여 결제 상세정보 조회 -->
	<select id = "findPaymentDetail" resultType = "PaymentDetailDto" parameterType = "int">
		select * from payment_detail where payment_no = #{paymentNo} order by payment_detail_no asc
	</select>
	
	<!-- 결제 번호를 이용하여 해당 결제 상품의 결제 상태를 '취소'로 변경 -->
	<update id = "cancelPayment" parameterType = "int">
		update payment set payment_status = '취소' where payment_no = #{paymentNo}
	</update>
	
	<!-- 결제 번호를 이용하여 해당 번호의 세부 결제 상품의 결제 상태를 '취소'로 변경 -->
	<update id = "cancelPaymentDetail" parameterType = "int">
		update payment_detail set payment_detail_status = '취소' where payment_no = #{paymentNo}
	</update>

	<!-- 세부 결제 번호를 이용하여 세부 결제 정보 조회  -->
	<select id = "findPaymentDetailItem" resultType = "PaymentDetailDto" parameterType = "int">
		select * from payment_detail where payment_detail_no = #{paymentDetailNo}
	</select>

	<!-- 세부 결제 번호를 이용하여 해당 세부 결제 상품의 결제 상태를 '취소'로 변경 -->
	<update id = "cancelPaymentDetailItem" parameterType = "int">
		update payment_detail set payment_detail_status = '취소' where payment_detail_no = #{paymentDetailNo}
	</update>

	<!-- 부분 취소 결과에 따라 전체 결제의 상태를 '취소' 또는 '부분취소'로 변경 -->
	<update id = "refreshPayment" parameterType = "int">
		update payment set payment_status=(
		    select 
		        case
		            when "전체"="취소" then '취소'
		            when "취소"=0 then '승인'
		            else '부분취소'
		        end
		    from
		    (
		        select 
		            (select count(*) from payment_detail where payment_no = #{paymentNo}) "전체",
		            (select count(*) from payment_detail where payment_no = #{paymentNo} and payment_detail_status='취소') "취소" from dual
		    )
		)
		where payment_no = #{paymentNo}
	</update>
	
	<!-- 
		계츻형 조회 
		- 외래키로 연결된 상하관계의 테이블을 상위 테이블 항목 기준으로 조회
		- 상위 테이블 요소 1개와 하위 테이블 요소 여러개가 합쳐져서 조회
		- 구조화된 데이터를 출력할 때 좋다
		- MyBatis에게 형태를 알려줄 필요가 있다
		
		<resultMap>
		- type : 자료형
		- id : 별칭(구문에서 resultMap으로 선언할 이름)
		
		- <association>은 객체가 존재함을 알려주는 태그
		- property : 객체가 선언된 이름
		- <result>를 통해 DB 컬럼(column)과 객체 필드(property)를 매핑
		
		- <collection>은 객체 목록이 존재함을 알려주는 태그
		- javaType : 저장소 형태
		- ofType : 내용물 형태
		- select : 값을 채우기 위해 실행해야 할 구문
		- column : select를 실행하기 위해 필요한 컬럼값
	-->
	
	<!-- 계층형 조회 - 결제 정보와 상세 결제 정보 -->
	<select id = "paymentGroupList" resultMap = "vo" parameterType = "String">
		select * from payment
	</select>

	<!-- 계층형 조회를 위한 추가 설정 -->	
	<resultMap type = "PaymentVO" id = "vo">
		<association property = "paymentDto">
			<result column = "payment_no" property = "paymentNo"/>
			<result column = "member_id" property = "memberId"/>
			<result column = "item_name" property = "itemName"/>
			<result column = "total_amount" property = "totalAmount"/>
			<result column = "approve_at" property = "approveAt" javaType = "java.sql.Date"/>
			<result column = "payment_status" property = "paymentStatus"/>
			<result column = "tid" property = "tid"/>
		</association>
		
		<collection column = "payment_no" property = "paymentDetailList"
					javaType = "java.util.List" ofType = "PaymentDetailDto"
					select = "findPaymentDetail">
			<result column = "payment_detail_no" property = "paymentDetailNo"/>
			<result column = "payment_no" property = "paymentNo"/>
			<result column = "product_no" property = "productNo"/>
			<result column = "product_name" property = "productName"/>
			<result column = "qty" property = "qty"/>
			<result column = "product_price" property = "productPrice"/>
			<result column = "payment_detail_status" property = "paymentDetailStatus"/>
		</collection>
	</resultMap>

</mapper>